// 원형이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사해서 새로운 객체를 생성
#include <iostream>

using namespace std;

class Monster      // Monster 클래스
{
  // Stuff... 
};

class Ghost :public Monster {};         // Ghost 클래스가 Monster 클래스 상속
class Demon :public Monster {};        // Demon 클래스가 Monster 클래스 상속
class Sorcerer :public Monster {};       // Sorcerer 클래스가 Monster 클래스 상속

class Spawner                 // Spawner 클래스
{
public:                       // 접근 지정자
  virtual ~Spawner (){}       // 가상함수, 파생 클래스에서 재정의 가능한 멤버 함수
  virtual Monster *spawnMonster ()=0 ;    // 상위 클래스인 Monster에 추상 메서드spawnMonster() 추가 
};

class GhostSpawner :public Spawner       // GhostSpawner 클래스가 Spawner 클래스 상속
{
public:                                      // 접근 지정자                 
  virtual Monster *spawnMonster ()         // Monster에 spawnMonster() 추가 
  {
    return new Ghost ();                    // 동적 할당 
  }
};

class DemonSpawner :public Spawner    // DemonSpawner 클래스가 Spawner 클래스 상속
{
public:
  virtual Monster *spawnMonster ()   // Monster에 추상 매서드 spawnMonster() 추가 
  {
    return new Demon ();             // 동적 할당 
  }
};

// You get the idea...

class Monster                 // 상위 클래스 Monster
{
public:
  virtual ~Monster (){}        //소멸자      
  virtual Monster *clone ()=0 ;    // 상위 클래스인 Monster에 추상 메서드 clone()추가

  // Other stuff...
};
 
// 어떤 객체가 자기와 비슷한 객체를 스폰 -> 추상 메서드 clone() 추가

class Ghost :public Monster {      // 하위 클래스 Monster
public:
  Ghost (int health ,int speed )    // 생성자 (매개변수 2개)
  :health_(health ),
    speed_(speed )
  {}
  virtual Monster *clone ()
  {
    return new Ghost (health_,speed_); //자신과 자료형과 상태가 같은 새로운 객체 반환
  }
private:
  int health_;
  int speed_;
};

class Spawner      // 상위 클래스 Spawner
{
public:
  Spawner (Monster *prototype )   // 생성자
  :prototype_(prototype )
  {}

  Monster *spawnMonster ()
  {
    return prototype_->clone ();  // prototype 클래스 안에 구현된 clone() 함수에 접근
  }

private:
  Monster *prototype_;  // 객체 포인터 선언
};

// Monster를 상속받는 모든 클래스에  clone 메서드가 존재, 스포너 클래스를 종류별로 만들 필요없이 한 개만 만들면 됨

Monster *ghostPrototype =new Ghost (15 ,3);   // 프로토 타입 Ghost 객체 생성
Spawner *ghostSpawner =new Spawner (ghostPrototype); // 생성된 프토토타입을 보유하는 스포너 생성

Monster *spawnGhost ()       // Monster 클래스 스폰 함수
{
  return new Ghost ();        // 동적 할당
}

typedef Monster *(*SpawnCallback )();     // 함수 포인터 저장

class Spawner            // 상위 클래스 Spawner
{
public:
  Spawner (SpawnCallback spawn )      
  :spawn_(spawn )
  {}

  Monster *spawnMonster ()
  {
    return spawn_();
  }

private:
  SpawnCallback spawn_;
};
Spawner *ghostSpawner =new Spawner (spawnGhost );  // 고스트 생성을 위한 스포너 동적 할당
